@use 'sass:math';

@mixin border-radius($key) {
	border-radius: $key;
	background-clip: padding-box;
	/* stops bg color from leaking outside the border: */
}

@mixin position($position, $args) {
	@each $o in top right bottom left {
		$i: index($args, $o);

		@if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
			#{$o}: nth($args, $i + 1);
		}
	}

	position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
	@include position(absolute, $args);
}

@mixin bp($breakpoint, $type: min) {
	$value: map-get($breakpoints, $breakpoint);

	@if $value != null {
		$current-breakpoint: $breakpoint !global;

		@if $type == max {
			$value: $value - .063em
		}

		@media (#{$type}-width: $value) {
			@content;
		}

		$current-breakpoint: $default-breakpoint !global;
	}

	@else {
		@warn 'Invalid breakpoint `#{$breakpoint}`.';
	}
}

@mixin placeholder($name) {

	// If placeholder doesn't exist yet in `$placeholders` list
	@if not index($placeholders, $name) {
		// Store its name
		$placeholders: append($placeholders, $name) !global;

		//Dumping a placeholder out of any media query as well
		// so basically at root level
		%#{$name}-#{$default-breakpoint} {
			@content;
		}

		// At root level
		@at-root {

			// Looping through `$breakpoints`
			@each $breakpoint,
			$value in $breakpoints {

				// Opening a media query block
				@media (min-width: $value) {

					// Generating a placeholder
					// Called $name-$breakpoint
					%#{$name}-#{$breakpoint} {
						@content;
					}
				}
			}
		}
	}

	// If placeholder already exists, just warn the user
	@else {
		@warn 'Placeholder `#{$name}` already exists.';
	}
}


@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}

@mixin z-index($key) {
	z-index: z-index($key);
}

// transformations :: rotate, scale, translate
@mixin transform($key...) {
	transform: translate3d(0, 0, 0) $key;
}

// rotate
@mixin rotate($key) {
	@include transform(rotate(#{$key}deg));
}

// translate
@mixin translate($x, $y) {
	@include transform(translate($x, $y));
}

@mixin font-tracking($value) {
	letter-spacing: math.div($value, 1000) + rem;
}
